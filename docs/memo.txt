本研究は、Rust向け形式検証プログラムVerusを用いて、ロックフリーアルゴリズムの安全性を厳密に検証することを目的とする。
Verusは、Rustの型システムとシームレスに統合されており、プログラムの正しさを検証するためのアノテーションを容易に記述できるという利点を持つ。現在も活発に研究と開発が進められているが、Rustで記述できる範囲は非常に膨大であり、現時点でVerusは完全にRustのすべての機能を網羅しているわけではない。
本研究では、Rustが特に重要な存在感を発揮している低レベルなシステムプログラミング領域において、Verusが実際にどのような機能、記述に対して有効な検証が行えるのかを体系的に評価し、適用範囲および限界を評価することを目的とする。

本研究は、Verusを実際のライブラリに適用することで、その有効性、パフォーマンス、そして現実的なコードベースへの適用限界を体系的に評価することも目的とする


本研究のユニークな点は、VerusによるRustの形式検証が実世界のソフトウェアにどの程度有効かを体系的に示す点である。
第一に、近年開発されたRust向け形式検証ツールVerusの有効性を、実践的な視点から機能別に体系的に評価する点である。「目的」においても述べた通り、Verusの適用範囲や限界については、まだ十分に明らかにされていない。本研究は、低レベルなシステムプログラミング領域という、Rustが特に重要な存在感を発揮する分野において、rawポインタのハンドリング、Atomic演算、並行性などの具体的なRustの機能や記述に対して有効な検証が行えるかを実証的に検証し、今後のツール開発とコミュニティにおける形式手法の普及に貢献する。
第二に、この検証を、実際に産業界で利用されているロックフリーアルゴリズムを用いたRustライブラリBBQueueに適用する点である。単なる抽象的なアルゴリズムではなく、実用的なライブラリを対象とすることで、形式検証の現実的な課題と、その解決策を提示できる。また、BBQueueの核となるロックフリーアルゴリズムの証明を通じて確立される検証ワークフローと技術は、BBQueueの継続的な機能強化や大規模なリファクタリングの際にも、その信頼性を担保しつつ強化できるという大きな利点をもたらす。このアプローチは、今後開発される同様のクリティカルなソフトウェアに対する高信頼性ソフトウェア開発の新たなモデルケースとなり、自動車の制御システムや医療機器など、人命に関わる重要なシステム開発において、より安全で信頼性の高いソフトウェアを効率的に構築するための確固たる道筋を示すことができる。



現代社会において、自動車や医療機器、IoTデバイスなどのクリティカルシステムでは、ソフトウェアが中核的役割を担っている。そのため、ソフトウェアの信頼性確保は極めて重要である。しかし、複数の処理が並行して実行されるシステムでは、デッドロックやデータ競合といった複雑な不具合が発生しやすく、従来のテストやシミュレーションのみではその正当性を十分に保証できない場合が多い。
さらに、高い性能やリアルタイム性を確保するために、スレッド同期のための待機を極力排したロックフリーアルゴリズムが利用される。しかし、ロックフリーアルゴリズムはその設計の複雑性ゆえに、正当性の検証が特に難しいという課題を抱えている。


本研究の第一の目的は、Rust向け形式検証ツールVerusを用いて、実際に産業界で利用されているロックフリーアルゴリズムの安全性を厳密に検証することである。
第二の目的は、Verus が実際にRustのどのような言語機能やプログラム構造に対して有効な検証を提供できるのかを体系的に評価し、その適用範囲と限界を明確化することである。Verus は現在も研究開発途上にあるため、実際のロックフリー実装を対象とした検証を通じて、ツールの有効性や不足点を具体的に示すことができる。
これらを通じて、本研究は形式検証手法の実用的な適用事例を提示し、Verusの今後の発展および Rust コミュニティにおける形式手法の普及に資することを目指す。